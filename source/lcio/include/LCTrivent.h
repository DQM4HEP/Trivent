  /// \file LCTrivent.h
/*
 *
 * LCTrivent.h header template automatically generated by a class generator
 * Creation date : dim. mars 20 2016
 *
 * This file is part of Trivent libraries.
 * 
 * Trivent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Trivent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Trivent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LCTRIVENT_H
#define LCTRIVENT_H

#include "Trivent.h"
#include "TriventListener.h"
#include "Event.h"
#include "Unit.h"

#include "EVENT/LCEvent.h"
#include "EVENT/LCCollection.h"

namespace trivent
{

/**
 *  @brief  LCTriventListener class
 */
class LCTriventListener : public TriventListener
{
public:
	/**
	 *  @brief  Constructor
	 */
	LCTriventListener();

	/**
	 *  @brief  Notify when a LCEvent has been reconstructed
	 *
	 *  @param  pLCEvent a reconstructed LCEvent to process
	 */
	virtual void processReconstructedEvent(EVENT::LCEvent *pLCEvent) = 0;

private:
	void startProcessingInputEvent(const Event *const pInputEvent) { /* nop */ }
	void processReconstructedEvent(const Event *const pReconstructedEvent);
	void postProcessEvent(EVENT::LCEvent *pLCEvent);

	/**
	 *  @brief  Create an LCEvent from the trivent reconstructed event
	 */
	EVENT::LCEvent *createLCEvent(const Event *const pReconstructedEvent);

	/**
	 *  @brief  Copy all parameters from input parameters to target parameters
	 */
	static void copyLCParameters( const EVENT::LCParameters &inputParameters , EVENT::LCParameters &targetParameters );

private:
	int                                    m_eventNumber;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/**
 * @brief LCTrivent class.
 *
 * Helper class to convert lcio object in the Trivent framework
 */ 
class LCTrivent
{
public:
	/**
	 *  @brief  Convert elements of a LCCollection to the Trivent structure
	 *
	 *  @tparam  The lcio object type. Must inherit from LCObject (use of dynamic_cast)
	 *  @tparam  GetTimeFunction  the member function of the Object class that will returns the object time
	 *
	 *  Example :
	 *
	 *  @code
	 *
	 *  LCTrivent::addCollection<EVENT::RawCalorimeterHit>( pLCEvent , "MyRawCaloHits" , triventEvent, &EVENT::RawCalorimeterHit::getTimeStamp);
	 *
	 *  @endcode
	 */
	template <typename Object, typename GetTimeFunction>
	static void addCollection(EVENT::LCEvent *pLCEvent, const std::string &collectionName, trivent::Event &event, GetTimeFunction func);
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

template <typename Object, typename GetTimeFunction>
inline void LCTrivent::addCollection(EVENT::LCEvent *pLCEvent, const std::string &collectionName, trivent::Event &event, GetTimeFunction func)
{
	if( ! pLCEvent )
		return;

	EVENT::LCCollection *pLCCollection = pLCEvent->getCollection( collectionName );
	trivent::UnitSet unitSet;

	for( unsigned int e=0 ; e<pLCCollection->getNumberOfElements() ; e++ )
	{
		Object *pObject = dynamic_cast<Object *>( pLCCollection->getElementAt(e) );

		if( ! pObject )
			continue;

		uint64_t time = static_cast<uint64_t>( (pObject->*func)() );

		trivent::Unit *pUnit = new trivent::Unit( pLCCollection->getTypeName() , time , (void*) pObject );
		unitSet.insert(pUnit);
	}

	event.addUnits( collectionName , unitSet );
}

} 

#endif  //  LCTRIVENT_H
